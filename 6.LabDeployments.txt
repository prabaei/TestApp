

Lab: Working with Deployments
Introduction

Deployments represent a set of multiple, identical Pods with no unique identities.
Deployment runs multiple replicas of your application and automatically replaces any instances that fail or become unresponsive. In this way, Deployments help ensure that one or more instances of your application are available to serve user requests. Deployments are managed by the Kubernetes Deployment controller.
Deployment ensures that only a certain number of Pods are down while they are being updated. By default, it ensures that at least 75% of the desired number of Pods are up (25% max unavailable).
In this Lab, you will learn below items:
Objectives:
* Create a Deployment with Imperative Method
* Debugging a Deployment
* Generate the Deployment manifest in the yml & json format
* Create a Deployment with Declarative Method
* Exposing Deployment to a Service i.e., ClusterIP
* Scale-Up/Down Deployment
Note: Ensure you have running cluster deployed
1. Ensure that you have logged-in as root user with password as redhat on xmaster
node.

1.1 Let us create deployment named redis-deployment and using the Redis image:
# kubectl create deployment redis-deployment --image=redis
1.2 Let us check the details of the deployment by executing the command
# kubectl describe deployment redis-deployment
1.3 Let us list the pods by executing the below command:
# kubectl get pods
1.4 Let us delete the deployment, by executing the below command.
# kubectl delete deployment redis-deployment
1.5 Let us create another deployment of nginx with 4 replicas
# kubectl create deployment nginx-deployment --image=nginx --replicas=4 --dry-run=client -o yaml | tee nginx-deployment.yml
1.6 Let us use the nginx-deployment. yml file created from the above step for creating deployment.
# kubectl apply -f nginx-deployment.yml

1.7 Let us list pods by executing the below command:
# kubectl get pods

1.8 Let us clean up by deleting the deployment and notice that it deletes the pods as well
# kubectl delete -f nginx-deployment.yml
1.9 Let us download the file from git repository which contains manifests required for this exercise, by executing the below command.
# wget https://10.0.31.1/labsk8s/6.0.deployment.yml
1.10 Let us view the manifest file
# cat -n 6.0.deployment.yml

1.11 Let us create the deployment using the deployment.yml file.
# kubectl apply -f 6.0.deployment.yml

1.12 Let us list the deployment by executing the below command.
# kubectl get deployment
1.13 Let us list the labels automatically generated for each Pod, by executing the below command.
# kubectl get pods --show-labels
1.14 Let us list the ReplicaSet, by executing the below command
# kubectl get rs

1.15 Let us expose the deployment to the service to access the application
# kubectl expose deployment nginx-deploymnet --name demo-service --type ClusterIP --labels app=nginx --port 80
1.16 Let us list the service, by executing the below command.
# kubectl get svc demo-service
1.17 Let us access the application using the cluster-ip, by executing the below command.
# kubectl get svc demo-service -o jsonpath={.spec.clusterIP} # CIP=`kubectl get svc demo-service -o jsonpath={.spec.clusterIP}`
# echo $CIP
# curl $CIP



2.1 Let us scale up the deployment by executing the below command.
# kubectl scale deployment web-server --replicas=6
Letï¿½s verify the self-healing property assured by the deployment
# kubectl delete pod --all

2.2 Let us list the ReplicaSet, by executing the below command.
# kubectl get rs
2.3 Lets Scale down to 2 replicas
# kubectl scale deployment web-server --replicas=2
2.4 Let us list the ReplicaSet, by executing the below command.
# kubectl get rs
2.5 Lets delete the deployment
# kubectl delete deployment web-server

2.6 Clean-up
# rm -rf webserver-deployment.yml


